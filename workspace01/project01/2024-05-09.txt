not 단항 연산자

진리표
##################################################


# 가상환경 #
### 가상환경을 만든다는 것은 잘 작동되었던 환경들을 전체 카피를 하여 전달하는 것을 의미함.
    가상환경으로 여러 버전을 만들 수 있음.
    따라서, 가상환경을 만들줄 알아야 함.
### 기존에 있는 것을 이용해서 가상환경을 만들기 때문에
    "의존성 관리"라는 것이 매우 중요.
### .py의 집합은 패키지를 의미.
### pip 공식 패키지 매니저

### conda navigator를 이용해서 환경을 삭제 및 추가를 할 수 있음.


# pass 키워드 #
### pass 대신 ...을 사용해도 됨.
### 아무것도 작성안하게 되면 IndentationError를 발생시킴.


# 컨테이너 객체 #
성격이 비슷한것들을 모아둠.


# 이터러블 객체 #
반복시킬 수 있음.


# 이터러블 객체 #
반복문이랑 결합이 됨.


# 반복문 #
### 자료구조하고 결합된 반복문
### 리스트 튜플 셋 딕셔너리 for
### while / break / continue
### 배열(array) : 처음 만들어질때부터 크기가 정해져있음. / 아이템의 추가 삭제
### 리스트 : 이터러블 객체
    리스트의 표현 : list = []
    리스트는 0번째 인덱스부터 시작함.
    * 대괄호 안에 들어간 것을 인덱스(index)라고 부름.


# len #
### 길이를 출력해주는 함수


# append #
### 맨뒤에 추가해줌
### 원본에 영향을 줌(파괴적 처리)


# insert #
### 원하는 위치에 추가해줌
### 원본에 영향을 줌(파괴적 처리)


# del, pop #
### 요소 제거하는데 사용
### del 리스트명[인덱스]
### 리스트명.pop(인덱스)


# for문 #
### for 반복자 in 반복할 수 있는 것:
        코드
### 위와 같은 구조의 형식으로 반복문을 사용할 수 있음.

## for문 예시 ##
### for i in range(0, 100):
        print(i)

### for i in range(0, len(list), 1):
        print(f"{i}번째 인덱스 값은 {list[i]}입니다")

### for i in list:
    print(i)


# enumerate #
### index가 필요할 때 사용함.
### list = ["a", "b", "c", "d", "e"]
    for i in enumerate(list):
        print(i)
    
    위와 같은 코드가 있을 때, 출력의 결과는 아래와 같음.
    (0, "a")
    (1, "b")
    (2, "c")
    (3, "d")
    (4, "e")
    이런식으로, index가 필요할 때 사용함.

    for i, j in enumerate(list):
        (코드)
    위에서 i는 각 index를 의미하고, j는 각 인덱스에 해당하는 값을 의미함.


# center #
### 문자열을 가운데 정렬하고 싶을 때 사용함.
### (strings).center(20)
    (strings).center(20, "#")와 같은 방법으로 사용함.