워크스페이스
프로젝트01
프로젝트02
프로젝트03
앱01
앱02

1. 파이썬 설치
2. 아나콘다 설치
3. 에디터(vsCode) 설치
vsCode에서 ctrl + , 누른 후 auto save 입력하고 자동저장 기능 킴

vscode cheat sheet : 치트시트 컨닝페이퍼 요약정리(단축키 정리)
윈도우 : https://code.visualstudio.com/shortcuts/keyboard-shortcuts-windows.pdf
맥 : https://code.visualstudio.com/shortcuts/keyboard-shortcuts-macos.pdf
만약, pandas 패키지에서 궁금한게 있으면 pandas cheat sheet 검색하면 됨
추가로, 공식문서를 보고싶을 때는 xxxx document 검색하면 됨
이렇게 하는 이유는 눈(이미지)으로 보는게 제일이기 때문 !


***기본적인 vsCode 단축키***
ctrl + shift + p : 설정
ctrl + p : 파일 열기
ctrl + j : 터미널 열기/닫기
ctrl + b : 왼쪽 탭 열기/닫기
ctrl + shift + x : extension 탭 열기/닫기
alt + shift + 위/아래 : 위/아래로 한줄 복사

extension에서 black formatter 설치
extension에서 autoDocstring - Python 설치
설정 -> save format 입력 -> format on save 체크
윈도우 -> everything 설치 : 해당되는 모든 이름같은거 찾아옴


*** python ***
ctrl + / : 주석 설정
option + shift + f : 포멧팅하기
python file_name.py : file_name 파이썬 실행


*** 확장자 ***
파이썬 확장자 : .py
주피터노트북 : .ipynb


*** 경로 문자열 ***
경로 구분문자열
윈도우 : \
리눅스, 맥OS : /
Q. 윈도우와 리눅스/맥OS를 한번에 처리하려면 ?
A. 나중에 path 관련해서 pathlib 라이브러리 사용해서 처리

.. : 바로위 상위로 이동
. : 현재 디렉토리
~ user home
/ 루트경로 최상단


*** 선언식 키워드 / 표현식 키워드 ***
** 선언식 키워드 ** 
def 함수명():
    실행문장

** 표현식 키워드 **
종결문자 없음
ex) 10 + 10


*** 키워드 ***
예약어(False, None, if, is, ...)등은 이름으로 사용 불가


*** 식별자 ***
파이썬은 대소문자 구분
키워드 사용 불가
특수 문자는 _만 허용됨
숫자로 시작 불가

** 케이스 **
카멜케이스, 스네이크 케이스, 파스칼 케이스 등 여러가지가 있음
보통 카멜 케이스는 클래스, 스네이크 케이스는 함수/변수


*** Sequence ***
Sequence는 iterable 객체
ex) ["a", "b", "c"]

*** 사용자 함수 ***
직접 만들어서 사용하는 함수를 의미


*** 파이썬의 내장함수(built-in-function) ***
이미 만들어진 함수를 의미
내장함수의 갯수가 명확하고 유한함


*** 기본자료형 ***
문자열(string) : "Hello"
숫자(number) : 123, 45678
불(boolean) : True, False


*** 참조자료형 ***
class, interface 등이 해당


*** 사용자 함수
def getType(a):
    print(type(a))

a = "Hello"
getType(a)


*** 이스케이핑 ***
r'\n'
'\\n'

윈도우에서 파일경로를 복사하게 되면
예를들어 C:\Users\USER\Desktop\workspace01\project01\runner.py와 같이 나오게 되는데
이 경로를 출력하고 싶으면
"C:\\Users\\USER\\Desktop\\workspace01\\project01\\runner.py"와 같이 작성해주면 됨
또 다른 방법으로는
r"C:\Users\USER\Desktop\workspace01\project01\runner.py"


*** 여러줄 입력 ***
"""
abc
defg
hij
kl
"""
와 같이 작성해주면 됨


*** 인덱싱 ***
** 문자열 인덱싱 **
인덱스를 통해서 문자 하나를 선택하는 것

a = "안녕하세요" 일 때,
a[0] = "안"
a[1] = "녕"
a[2] = "하"
a[3] = "세"
a[4] = "요"
와 같이 됨

a에서 "하세"를 뽑아오고 싶으면 a[2:4]를 하면 됨
맨 처음부터 4번째 인덱스까지 슬라이싱하고싶으면 a[:4]

** IndexError(index out of range) **
IndexError는 리스트/문자열의 수를 넘는 요소를 선택할 때 발생함


*** 문자열 길이 ***
len() 함수를 사용해서 문자열의 길이를 구함


*** dir 메서드 ***
dir(객체) : 객체가 가지고 있는 기능들을 리스트로 출력해줌


*** _, __ ***
_ : 언더스코어
__ : 더블언더스코어(던더)


*** 제곱연산자 ***
2 ** 4와 같이 사용할 수도 있지만
math.pow(2,4)와 같이 사용할 수도 있음


*** 변수 ***
변경이 가능한 식별자
물리적 메모리공간을 가지고 있음
동적타입
재할당이 가능함

ex)
pi = 3.14
pi = 3.141
이와 같이 우항을 좌항에다가 대입하는 방식 => 2항연산자


*** 복합 대입 연산자 ***
a = a + 1과
a += 1이 같은 연산을 수행함


*** 사용자 입/출력 ***
input()으로 사용
사용자에게 입력을 받음
입력함수의 리턴타입은 str이어서, 원하는 타입으로 맞춰줘야 하는 작업도 필요 !

출력은 print()


*** 명시적타입변환 캐스트 ***
int() : int 타입으로 바꾸기
float() : float 타입으로 바꾸기
str() : str 타입으로 바꾸기


*** (암묵적)묵시적타입변환 Promotion
3 + 3.14는 암묵적으로 3.0 + 3.14로 계산하게 됨


*** ValueError 예외 ***
자료형을 변환할 때 변활할 수 없는 것을 변환하려고 하면 ValueError가 발생함
ex) int("Hello"), float("Hello")


*** zfill ***
빈칸을 0으로 채움


*** 멀티패러다임 ***
절차지향프로그래밍, 객체지향프로그래밍, 함수형프로그래밍


*** 주소값 참조 ***
a = "aaaa"
b = a

a = "dfdfdfd"
b = "dfdfdfd"

깊은 복사 : 각각 메모리 주소값을 따로 가짐
얕은 복사 : 메모리 주소값을 똑같이 가짐


*** 파괴적 함수/비파괴적 함수 ***
파괴적 함수 : 원본이 바뀌는 함수
비파괴적 함수 : 원본이 바뀌지 않는 함수


*** strip() ***
공백 제거하는 함수
strip() : 문자열 양옆의 공백을 제거함
lstrip() : 문자열 왼쪽의 공백을 제거함
rstrip() : 문자열 오른쪽의 공백을 제거함
"    공백제거   ".strip()


*** in 연산자 ***
좌항(단수) in 우항(복수)
좌항이 우항에 포함되어있는지를 확인하여 True/False로 반환함